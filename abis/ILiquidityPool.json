{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Loss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Profit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "writeAmount",
          "type": "uint256"
        }
      ],
      "name": "Provide",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "writeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setLockupPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "ILiquidityPool",
  "offset": [
    1113,
    1769
  ],
  "sha1": "30b7f52cf2900f1d1e6f088712f915fcb44384e7",
  "source": "pragma solidity ^0.7.0;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2020 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\n// import \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\n\n\ninterface ILiquidityPool {\n    struct LockedLiquidity { uint amount; uint premium; bool locked; }\n\n    event Profit(uint indexed id, uint amount);\n    event Loss(uint indexed id, uint amount);\n    event Provide(address indexed account, uint256 amount, uint256 writeAmount);\n    event Withdraw(address indexed account, uint256 amount, uint256 writeAmount);\n\n    function unlock(uint256 id) external;\n    function send(uint256 id, address payable account, uint256 amount) external;\n    function setLockupPeriod(uint value) external;\n    function totalBalance() external view returns (uint256 amount);\n    // function unlockPremium(uint256 amount) external;\n}\n\n\ninterface IERCLiquidityPool is ILiquidityPool {\n    function lock(uint id, uint256 amount, uint premium) external;\n    function token() external view returns (address);\n}\n\n\ninterface IETHLiquidityPool is ILiquidityPool {\n    function lock(uint id, uint256 amount) external payable;\n}\n\n\ninterface IHegicStaking {    \n    event Claim(address indexed acount, uint amount);\n    event Profit(uint amount);\n\n\n    function claimProfit() external returns (uint profit);\n    function buy(uint amount) external;\n    function sell(uint amount) external;\n    function profitOf(address account) external view returns (uint);\n}\n\n\ninterface IHegicStakingETH is IHegicStaking {\n    function sendProfit() external payable;\n}\n\n\ninterface IHegicStakingERC20 is IHegicStaking {\n    function sendProfit(uint amount) external;\n}\n\n\ninterface IHegicOptions {\n    event Create(\n        uint256 indexed id,\n        address indexed account,\n        uint256 settlementFee,\n        uint256 totalFee\n    );\n\n    event Exercise(uint256 indexed id, uint256 profit);\n    event Expire(uint256 indexed id, uint256 premium);\n    enum State {Inactive, Active, Exercised, Expired}\n    enum OptionType {Invalid, Put, Call}\n\n    struct Option {\n        State state;\n        address payable holder;\n        uint256 strike;\n        uint256 amount;\n        uint256 lockedAmount;\n        uint256 premium;\n        uint256 expiration;\n        OptionType optionType;\n    }\n\n    function options(uint) external view returns (\n        State state,\n        address payable holder,\n        uint256 strike,\n        uint256 amount,\n        uint256 lockedAmount,\n        uint256 premium,\n        uint256 expiration,\n        OptionType optionType\n    );\n\n    function pool() external view returns (address);\n    function impliedVolRate() external view returns (uint256);\n    function setImpliedVolRate(uint256 value) external;\n}\n\n// For the future integrations of non-standard ERC20 tokens such as USDT and others\n// interface ERC20Incorrect {\n//     event Transfer(address indexed from, address indexed to, uint256 value);\n//\n//     event Approval(address indexed owner, address indexed spender, uint256 value);\n//\n//     function transfer(address to, uint256 value) external;\n//\n//     function transferFrom(\n//         address from,\n//         address to,\n//         uint256 value\n//     ) external;\n//\n//     function approve(address spender, uint256 value) external;\n//     function balanceOf(address who) external view returns (uint256);\n//     function allowance(address owner, address spender) external view returns (uint256);\n//\n// }\n",
  "type": "interface"
}