// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Provide extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Provide entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Provide entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Provide", id.toString(), this);
  }

  static load(id: string): Provide | null {
    return store.get("Provide", id) as Provide | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get numWriteTokens(): BigInt {
    let value = this.get("numWriteTokens");
    return value.toBigInt();
  }

  set numWriteTokens(value: BigInt) {
    this.set("numWriteTokens", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Withdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Withdraw", id.toString(), this);
  }

  static load(id: string): Withdraw | null {
    return store.get("Withdraw", id) as Withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get numWriteTokens(): BigInt {
    let value = this.get("numWriteTokens");
    return value.toBigInt();
  }

  set numWriteTokens(value: BigInt) {
    this.set("numWriteTokens", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Profit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Profit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Profit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Profit", id.toString(), this);
  }

  static load(id: string): Profit | null {
    return store.get("Profit", id) as Profit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }
}

export class Loss extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Loss entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Loss entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Loss", id.toString(), this);
  }

  static load(id: string): Loss | null {
    return store.get("Loss", id) as Loss | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Claim entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Claim entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Claim", id.toString(), this);
  }

  static load(id: string): Claim | null {
    return store.get("Claim", id) as Claim | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }
}

export class ImpliedVolatily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ImpliedVolatily entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ImpliedVolatily entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ImpliedVolatily", id.toString(), this);
  }

  static load(id: string): ImpliedVolatily | null {
    return store.get("ImpliedVolatily", id) as ImpliedVolatily | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get impliedVolatility(): BigInt {
    let value = this.get("impliedVolatility");
    return value.toBigInt();
  }

  set impliedVolatility(value: BigInt) {
    this.set("impliedVolatility", Value.fromBigInt(value));
  }
}

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Asset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Asset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Asset", id.toString(), this);
  }

  static load(id: string): Asset | null {
    return store.get("Asset", id) as Asset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class HegicOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HegicOption entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HegicOption entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HegicOption", id.toString(), this);
  }

  static load(id: string): HegicOption | null {
    return store.get("HegicOption", id) as HegicOption | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlying(): string {
    let value = this.get("underlying");
    return value.toString();
  }

  set underlying(value: string) {
    this.set("underlying", Value.fromString(value));
  }

  get creationBlock(): BigInt {
    let value = this.get("creationBlock");
    return value.toBigInt();
  }

  set creationBlock(value: BigInt) {
    this.set("creationBlock", Value.fromBigInt(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    return value.toBigInt();
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get holder(): string {
    let value = this.get("holder");
    return value.toString();
  }

  set holder(value: string) {
    this.set("holder", Value.fromString(value));
  }

  get premium(): BigInt {
    let value = this.get("premium");
    return value.toBigInt();
  }

  set premium(value: BigInt) {
    this.set("premium", Value.fromBigInt(value));
  }

  get strike(): BigInt {
    let value = this.get("strike");
    return value.toBigInt();
  }

  set strike(value: BigInt) {
    this.set("strike", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get settlementFee(): BigInt {
    let value = this.get("settlementFee");
    return value.toBigInt();
  }

  set settlementFee(value: BigInt) {
    this.set("settlementFee", Value.fromBigInt(value));
  }
}

export class LiquidityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPool", id.toString(), this);
  }

  static load(id: string): LiquidityPool | null {
    return store.get("LiquidityPool", id) as LiquidityPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlying(): string {
    let value = this.get("underlying");
    return value.toString();
  }

  set underlying(value: string) {
    this.set("underlying", Value.fromString(value));
  }

  get numOptions(): BigInt {
    let value = this.get("numOptions");
    return value.toBigInt();
  }

  set numOptions(value: BigInt) {
    this.set("numOptions", Value.fromBigInt(value));
  }

  get numExpiredOptions(): BigInt {
    let value = this.get("numExpiredOptions");
    return value.toBigInt();
  }

  set numExpiredOptions(value: BigInt) {
    this.set("numExpiredOptions", Value.fromBigInt(value));
  }

  get numExercisedOptions(): BigInt {
    let value = this.get("numExercisedOptions");
    return value.toBigInt();
  }

  set numExercisedOptions(value: BigInt) {
    this.set("numExercisedOptions", Value.fromBigInt(value));
  }

  get options(): Array<string | null> {
    let value = this.get("options");
    return value.toStringArray();
  }

  set options(value: Array<string | null>) {
    this.set("options", Value.fromStringArray(value));
  }

  get numProvides(): BigInt {
    let value = this.get("numProvides");
    return value.toBigInt();
  }

  set numProvides(value: BigInt) {
    this.set("numProvides", Value.fromBigInt(value));
  }

  get provides(): Array<string | null> {
    let value = this.get("provides");
    return value.toStringArray();
  }

  set provides(value: Array<string | null>) {
    this.set("provides", Value.fromStringArray(value));
  }

  get latestProvide(): string | null {
    let value = this.get("latestProvide");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestProvide(value: string | null) {
    if (value === null) {
      this.unset("latestProvide");
    } else {
      this.set("latestProvide", Value.fromString(value as string));
    }
  }

  get numWithdraws(): BigInt {
    let value = this.get("numWithdraws");
    return value.toBigInt();
  }

  set numWithdraws(value: BigInt) {
    this.set("numWithdraws", Value.fromBigInt(value));
  }

  get withdraws(): Array<string | null> {
    let value = this.get("withdraws");
    return value.toStringArray();
  }

  set withdraws(value: Array<string | null>) {
    this.set("withdraws", Value.fromStringArray(value));
  }

  get latestWithdraw(): string | null {
    let value = this.get("latestWithdraw");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestWithdraw(value: string | null) {
    if (value === null) {
      this.unset("latestWithdraw");
    } else {
      this.set("latestWithdraw", Value.fromString(value as string));
    }
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get numProfits(): BigInt {
    let value = this.get("numProfits");
    return value.toBigInt();
  }

  set numProfits(value: BigInt) {
    this.set("numProfits", Value.fromBigInt(value));
  }

  get profits(): Array<string | null> {
    let value = this.get("profits");
    return value.toStringArray();
  }

  set profits(value: Array<string | null>) {
    this.set("profits", Value.fromStringArray(value));
  }

  get latestProfit(): string | null {
    let value = this.get("latestProfit");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestProfit(value: string | null) {
    if (value === null) {
      this.unset("latestProfit");
    } else {
      this.set("latestProfit", Value.fromString(value as string));
    }
  }

  get totalProfits(): BigInt {
    let value = this.get("totalProfits");
    return value.toBigInt();
  }

  set totalProfits(value: BigInt) {
    this.set("totalProfits", Value.fromBigInt(value));
  }

  get numLosses(): BigInt {
    let value = this.get("numLosses");
    return value.toBigInt();
  }

  set numLosses(value: BigInt) {
    this.set("numLosses", Value.fromBigInt(value));
  }

  get losses(): Array<string | null> {
    let value = this.get("losses");
    return value.toStringArray();
  }

  set losses(value: Array<string | null>) {
    this.set("losses", Value.fromStringArray(value));
  }

  get latestLoss(): string | null {
    let value = this.get("latestLoss");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestLoss(value: string | null) {
    if (value === null) {
      this.unset("latestLoss");
    } else {
      this.set("latestLoss", Value.fromString(value as string));
    }
  }

  get totalLosses(): BigInt {
    let value = this.get("totalLosses");
    return value.toBigInt();
  }

  set totalLosses(value: BigInt) {
    this.set("totalLosses", Value.fromBigInt(value));
  }

  get totalSettlementFees(): BigInt {
    let value = this.get("totalSettlementFees");
    return value.toBigInt();
  }

  set totalSettlementFees(value: BigInt) {
    this.set("totalSettlementFees", Value.fromBigInt(value));
  }

  get totalFees(): BigInt {
    let value = this.get("totalFees");
    return value.toBigInt();
  }

  set totalFees(value: BigInt) {
    this.set("totalFees", Value.fromBigInt(value));
  }

  get totalPutVolume(): BigInt {
    let value = this.get("totalPutVolume");
    return value.toBigInt();
  }

  set totalPutVolume(value: BigInt) {
    this.set("totalPutVolume", Value.fromBigInt(value));
  }

  get totalCallVolume(): BigInt {
    let value = this.get("totalCallVolume");
    return value.toBigInt();
  }

  set totalCallVolume(value: BigInt) {
    this.set("totalCallVolume", Value.fromBigInt(value));
  }

  get numImpliedVolatility(): BigInt {
    let value = this.get("numImpliedVolatility");
    return value.toBigInt();
  }

  set numImpliedVolatility(value: BigInt) {
    this.set("numImpliedVolatility", Value.fromBigInt(value));
  }

  get impliedVolatility(): Array<string | null> {
    let value = this.get("impliedVolatility");
    return value.toStringArray();
  }

  set impliedVolatility(value: Array<string | null>) {
    this.set("impliedVolatility", Value.fromStringArray(value));
  }

  get latestImpliedVolatility(): string | null {
    let value = this.get("latestImpliedVolatility");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestImpliedVolatility(value: string | null) {
    if (value === null) {
      this.unset("latestImpliedVolatility");
    } else {
      this.set("latestImpliedVolatility", Value.fromString(value as string));
    }
  }
}
